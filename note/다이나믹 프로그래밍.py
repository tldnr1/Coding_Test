'''
 - 메모리를 조금 더 사용하여, 시간을 줄이겠다는 목표
 - 반복되는 연산을 없애는 것이 dp의 목표

 - 점화식을 세우면 된다
 - 중요한 점은
    1) 큰 문제를 작은 문제롤 나눌 수 있는가
    2) 작은 결과를 합친 것이 큰 결과에서 동일하게 나오는가
        = 작은 문제에서 구한 정답이 그것을 포함하는 큰 문제에서도 동일한가

 - 작은 결과를 생각할 때, 그것 보다 큰 경우에 나올 값은 생각하지 마라. 헷갈린다
  e.g. 점화식이 d[i] = max(d[i], d[i-1] + d[i-3]*2) 인 경우
        i = 10의 상황을 따질 때, i > 10은 고려하지 않아도 된다
'''

# 예제 문제 '타일링 알고리즘' p.223
n = int(input())

d = [0] * (n+1)

d[1] = 1
d[2] = 3
for i in range(3, n+1):
    d[i] = (d[i-1] + 2 * d[i-2]) % 796796

print(d[n])